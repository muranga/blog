<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deployment on Muranga&#39;s Blog</title>
    <link>http://localhost:1313/categories/deployment/</link>
    <description>Recent content in Deployment on Muranga&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Apr 2015 18:40:02 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/deployment/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How I Deploy this blog site with Snap-ci</title>
      <link>http://localhost:1313/blog/2015/04/08/how-i-deploy-this-blog-site-with-snap-ci/</link>
      <pubDate>Wed, 08 Apr 2015 18:40:02 +0300</pubDate>
      
      <guid>http://localhost:1313/blog/2015/04/08/how-i-deploy-this-blog-site-with-snap-ci/</guid>
      <description>&lt;p&gt;I recently got inspired to start blogging again. So my approach was to go ahead and look out for the coolest tools I could use to build my blog. I found a few but narrowed down on a static site built with &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; (a static site generator), basically allows you to write up the posts in markdown which it later converts to Html for you, similar to how &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;jekyll&lt;/a&gt; works. So I went ahead and created a new site without any posts then created a repository for it on github &lt;a href=&#34;https://github.com/muranga/blog&#34;&gt;here&lt;/a&gt;. Having the blog on github allows me automate things a little. I have created a script to build the site and package it in a tar.&lt;/p&gt;

&lt;p&gt;Here is what the code to package the site looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#! /bin/bash
set -e
OUTPUT_FOLDER=&#39;builds&#39;
mkdir -p $OUTPUT_FOLDER
CURRENT_REVISION=`git rev-parse --short  HEAD`
OUTPUT_FILE=&amp;quot;$OUTPUT_FOLDER/blog-$CURRENT_REVISION.tar.gz&amp;quot;
hugo
tar -zcf $OUTPUT_FILE  public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script allows me to create a zipped package of the site for a specific revision of the repository. With that setup I have added &lt;a href=&#34;https://github.com/muranga/blog&#34;&gt;my blog&lt;/a&gt; to &lt;a href=&#34;https://snap-ci.com/muranga/blog/branch/master&#34;&gt;Snap CI&lt;/a&gt; , that means whenever I push changes to github the static site gets packaged.&lt;/p&gt;

&lt;p&gt;The next logical step is to deploy the site to the server and for that I prefer to use ansible.
This is what the playbook looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  tasks:
  - {apt: update_cache=yes cache_valid_time=3600}
  - apt: pkg={{item}} state=latest
    with_items: [nginx]
  - {user: &#39;name=blog generate_ssh_key=yes ssh_key_bits=2048&#39;}
  - {file: &#39;name=/home/blog/www state=directory&#39;}
  - {file: &#39;name=/home/blog/tmp state=directory&#39;}
  - {unarchive: src=../builds/blog-latest.tar.gz dest=/home/blog/www}
  - {file: path=/etc/nginx/sites-enabled/default state=absent}
  - template: &#39;src=nginx.conf.j2 dest=/etc/nginx/nginx.conf&#39;
  - {template: &#39;src=blog-nginx.conf.j2 dest=/etc/nginx/sites-enabled/blog.conf&#39;}
  - {service: &#39;name=nginx state=restarted&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The playbook makes sure a folder exists to host the site, copies then unarchives the tar package in the correct path and then makes sure Nginx is properly configured to serve the site.&lt;/p&gt;

&lt;p&gt;With ansible setup I have gone ahead to added a step in Snap-CI to deploy the blog and as you can see the blog is working.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>